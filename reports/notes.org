#+TITLE: PID Project Notes
#+DESCRIPTION: Electronic notebook for PID project.
#+AUTHOR: Tom Willis

* IMD Publications

Thaventhiran et al. reference seven IMDs and two non-IMDs: 

| Disease | First author    | Year | Present in collection |     PMID |
|---------+-----------------+------+-----------------------+----------|
| SLE     | Bentham         | 2015 | yes                   |          |
| T1D     | Cooper          | 2017 | yes                   |          |
| SLE     | J Bentham et al | 2015 | yes                   |          |
| CD      | de Lange        | 2017 | yes                   |          |
| UC      | de Lange        | 2017 | yes                   |          |
| RA      | Okada           | 2014 | yes                   |          |
| Asthma  | Zhu             | 2018 | no                    |          |
| T2D     | Scott           | 2017 | yes                   |          |
| Allergy | Ferreira        | 2017 | yes                   | 29083406 |
| CAD     | van der Harst   | 2018 | no                    |          |
|---------+-----------------+------+-----------------------+----------|

I searched in Guille's `rds/rds-cew54-basis/02-Processed` directory by first author name:

	SLE_Bentham_26502338_1-hg38.tsv.gz
	T1D_Cooper_doi101101120022_1-hg38.tsv.gz
	CD_DeLange_28067908_1-hg38.tsv.gz
	IBD_DeLange_28067908_1-hg38.tsv.gz
	UC_DeLange_28067908_1-hg38.tsv.gz
	...
	RA_Okada_24390342_1-hg38.tsv.gz
	RA_Okada_24390342_2-hg38.tsv.gz
	RA_Okada_24390342_3-hg38.tsv.gz
	T2D_Scott_28566273_1-hg38.tsv.gz
	...
	ASTE_Ferreira_29083406_1-hg38.tsv.gz
	ASTER_Ferreira_29083406_1-hg38.tsv.gz
	ASTR_Ferreira_29083406_1-hg38.tsv.gz
	RHEC_Ferreira_29083406_1-hg38.tsv.gz

Zhu et al. provide links to their data at http://lianglab.rc.fas.harvard.edu/AsthmaAllergyHeritability/. These were:

	UKBB.allergy.assoc.gz
	UKBB.asthma.assoc.gz

The analysis and meta-analysis from van der Harst et al. have the following doi: doi:10.17632/2zdd47c94h.1 and doi:10.17632/gbbsrpx6bs.1:

	CAD_UKBIOBANK.gz
 
** Details on individual studies and papers

*** Coronary Artery Disease (CAD), van der Harst et al. 

*** Crohn's Disease (CD), de Lange et al.

*** Ferreira et al.

    Ferreira et al. looked at:
    - asthma
    - hay fever (allergic rhinitis)
    - eczema

    Looking at Guille's spreadsheet:
    - aste: 'asthma-only vs. eczema-only'
    - aster: 'asthma and/or eczema and/or rhiniits'
    - astr: 'asthma-only vs. rhinitis-only'

    Guille notes that 'Study is a meta-analysis including 13 studies, these files look like 23andMe data only'.

    Authors sought to identify shared risk variants for the three diseases named above.

    n = 360,838, n0 = 180,709, n1=180,129

    The disease phenotype here is a broad one which encompasses the presence of any one (or more) of the three diseases.

*** Allergy and asthma (UKBB), Zhu et al.

    Using data from UKBB.

    n0 = 76,768

    Using 457,822 of 487,409 UKBB participants:

    - European ancestry and BMI measures
    - 457,690 with WHR and WC measures
    - 13,435 with early-onset asthma
    - 33,418 with later-onset asthma
    - 28,862 with nonatopic asthma
    - 23,982 with atopic asthma

   So not exactly a smaller study.

  
*** Additional studies for cFDR

    Are FinnGen or UKBB suitable here? The files from these projects really are what they seem: summary statistics for a range of different traits/diseases. What if the other papers use the same data, that is, the same subjects?

****  Asthma

     Searching through Guille's spreadsheet on Google Sheets is painful , so I downloaded the main table and searched with

     cut -f3,4,6,7,8,9,10,11 | grep ...

     I'm not actually sure about using FinnGen or UKBB data here. 
   
*****  Ferreira et al. (2019)

     Looked at adult-onset asthma
 
* Sorting and joining GWAS files

Sort and join on GRCh38 chromosome and base position fields. 

How many duplicate chr:bp pairings are there? There may sometimes be more than one minor allele.

Approach at the moment:

	zcat PID_Thaventhiram_32678341_1-hg38.tsv.gz | tail -n +2 | sort -n -k11,11 -k12,12 -o sorted_PID_Thaventhiram_32678341_1-hg38.tsv.gz

Don't forget to add the header to sorted files:

	cat <(zcat PID_Thaventhiram_32678341_1-hg38.tsv.gz | head -n 1) sorted_PID_Thaventhiram_32678341_1-hg38.tsv >PID_tmp.txt;
	mv PID_tmp.txt sorted_PID_Thaventhiram_32678341_1-hg38.tsv;

** Proposed work flow

Checks:

- Check values in chromosome column as we are going to create a file for each value:
	cut -f3 sorted_PID_Thaventhiram_32678341_1-hg38.tsv | sort | uniq -c
- Check that we have fewer lines in the merged files in total than in the original GWAS results files
- Check number of fields in file 
- Check file separator
- Check for duplicate SNP IDs in merged files (i.e. are there triallelic loci?)
- Check how many matches we have for different chromosomes; seems a bit odd that we have none for certain chromosomes (although chromosomes differ in length, of course)

Note that the following (in particular the field indices) depends on the file and assembly used

1. Make temporary directory
2. Split GWAS file by chr (depends on chr field in file): 

	time awk '{print > "tmp/chr"$3".tsv"}' <(tail -n +2 sorted_PID_Thaventhiram_32678341_1-hg38.tsv)

3. Sort individual files by bp (depends on bp field in file): 
	for i in *.tsv; do sort -n -k4,4 -o tmp.txt $i; mv tmp.txt $i; done

4. Join files 
5. Merge joined chr files, sort (again for some reason) and add header

** Sorting GWAS files

*** PID

Remember to use -F'\t' with awk when processing this file.

*** ASTE

**** hg19

For hg19, we are restricted to chr1-22 as the PID data did not have any (valid) entries for X, Y, or M.

	for i in $(ls ../aste | tr '\n' ' '); do join -1 6 -2 4 -o 1.1,1.5,1.6,1.2,1.3,1.7,1.8,2.7,2.5,1.11,2.8,1.10,2.2 "../aste/"$i "../pid/"$i >$i; done

4208214 lines total across the merged files, which is consistent with the original PID (7290873) and ASTE (13794598) files.

**** hg38

	for i in $(ls ../../chrFiles/aste/hg38 | tr '\n' ' '); do join -1 3 -2 12 -o 1.1,1.5,1.6,1.2,1.3,1.7,1.8,2.7,2.5,1.11,2.8,1.10,2.2 "../../chrFiles/aste/hg38/"$i "../../chrFiles/pid/hg38/"$i >$i; done

Checking that all SNP IDs in a given file are unique (i.e. the incidence of all IDs is 1) to then compare with the output of `wc -l`:

	for i in *.tsv; do cut -d' ' -f1 $i | sort | uniq -c | sed 's/^ *//' | cut -f1 -d' ' | sort | uniq -c; wc -l $i; done	

A non-unique ID is not a problem; we expect it for triallelic loci.

Excluding `chrNA`:

wc -l !(chrNA).tsv | less	
	... 
	3319189 total

which is consistent with the no. of lines in the original PID and ASTE files. Note that there were a few hundred SNPs in the files corresponding to alternate and unlocalised contigs. 

*** ASTER
     
*** ASTR

    Accidentally deleted my merged file

    
	for i in $(ls ../../chrFiles/aste/hg38 | tr '\n' ' '); do join -1 3 -2 12 -o 1.1,1.5,1.6,1.2,1.3,1.7,1.8,2.7,2.5,1.11,2.8,1.10,2.2 "../../chrFiles/aste/hg38/"$i "../../chrFiles/pid/hg38/"$i >$i; done

*** CAD 

Not sure which assembly the `hm_Chr` coordinate belongs to. 

[[https://hgsv.washington.edu/cgi-bin/hgTables?db%3Dhg19&hgta_group%3DvarRep&hgta_track%3DhgdpGeo&hgta_table%3DhgdpGeo&hgta_doSchema%3Ddescribe%2Btable%2Bschema][Looking at this link]], the first SNP in the sorted CAD file, rs3094315, has coordinates chr1:752565 in hg19 and coordinates chr1:817186 in [[https://www.ncbi.nlm.nih.gov/snp/rs3094315][hg38]].

So it seems the CAD file uses hg19.

I modified the header and wrote the result to `CAD_UKBIOBANK_mod.tsv.gz`. Then I ran Guille's pipeline on it.

[[https://www.ncbi.nlm.nih.gov/snp/?term%3Drs185642176][Checking rs185642176 on dbSNP]], seems Guille's pipeline has matched correctly paired the rs ID and GRCh38 coordinates 

*** CD_DeLange 

Not sure to what the `hm_*` columns, in particular the coordinates, correspond. Interestingly, it was never the case that the coordinates disagreed between `hm_CHR` and `CHR38` when both were present as I found when I ran:

	awk '$3!=$18 && $3=="NA" && $18=="NA"' sorted_CD_DeLange_28067908_1-hg38.tsv 

I had the same results when checking the bp coordinates.

*** IBD_DeLange

Same headers as with CD_DeLange and same story wrt to the `hm_CHR` and `hm_BP` columns.

*** RA_Okada_1

Appears that the unnumbered CHR and BP columns are not synonymous with the *38 columns as was the case with the DeLange files above.

Unnumbered CHR and BP columns correspond to hg19/GRCh37; if we look up rs1000319, we see that 19:5504636 corresponds to hg19 (https://www.google.com/search?q=rs1000319&oq=rs1000319&aqs=chrome.0.69i59j69i60.425j0j7&sourceid=chrome&ie=UTF-817186).

*** RA_Okada_2

CHR/BP columns correspond to hg19 as for RA_Okada_1.

*** RA_Okada_3

BP column appears to agree with BP38 column other than for NA values. Just printing out the GRCh38 for now.

*** RHEC

CHR/BP columns correspond to GRCh37/hg19; I determined this by looking up rs141659332 (https://www.ncbi.nlm.nih.gov/snp/?term=rs141659332).

*** SLE

Other than when we have NA values, the `hm` coordinates and those without that prefix seem to agree.

*** T1D

   216216 lines which have a SNPID which does not fit the ~^rs~ pattern. This emerged when I was trying to count duplicate SNPs with different reference-alternative allele pairings.

*** T2D

*** UC

There are some records for which `hm_BP` and `BP38` disagree:

	tail -n +2 sorted_UC_DeLange_28067908_1-hg38.tsv | awk -F'\t' '$4!=$19 && $4!="NA" && $19!="NA"' | wc -l
	164

Just proceeding with hg38 for now.

*** UKBB.allergy

Looking up the first SNP, seems coordinates are from hg19 (https://www.ncbi.nlm.nih.gov/snp/?term=rs12405651). 

Attempting to run Guille's pipeline on this. Manually changed A1 and A2 column headers to REF and ALT.

Ran his pipeline inside `rds-cew54-basis/GWAS_tools/01-Pipeline`.

*** UKBB.asthma

hg19 like UKBB.allergy.

** Joining GWAS files
*** Work on individual files
**** ASTE_PID

	[tw395@login-e-15 sorted]$ for i in $(find chrFiles/aste/hg38 -name "*.tsv"); do join -1 3 -2 12 -o 1.1,1.5,1.6,1.2,1.3,1.7,1.8,2.7,2.5,1.11,2.8,1.10,2.2 $i ${i/aste/pid} >"joins/aste_pid/hg38/"$(basename $i); done

SNPID.1	CHR.1	BP.1	CHR38.1	BP38.1	REF.1		ALT.1		REF.2	ALT.2	BETA.1	BETA.2	P.1	P.2

This output has columns:


...where 1 denotes the fields from ASTE and 2 those from PID.

When I merged the individual chr join files, I found that they were not sorted. 

**** ASTER_PID

Same as for the ASTE_PID join.

SNPID.1	CHR.1	BP.1	CHR38.1	BP38.1	REF.1		ALT.1		REF.2	ALT.2	BETA.1	BETA.2	P.1	P.2

**** ASTR_PID

Same as for the ASTE_PID join.

SNPID.1	CHR.1	BP.1	CHR38.1	BP38.1	REF.1		ALT.1		REF.2	ALT.2	BETA.1	BETA.2	P.1	P.2

I had to repeat the join here as I accidentally rm'd the joined files.

  for i in $(ls ../../chrFiles/astr/hg38 | tr '\n' ' '); do join -t '   ' -1 3 -2 12 -o 1.1,1.5,1.6,1.2,1.3,1.7,1.8,2.7,2.5,1.11,2.8,1.10,2.2 "../../chrFiles/astr/hg38/"$i "../../chrFiles/pid/hg38/"$i >"hg38/"$i; done

  I accidentally ran the join on the aste files instead of the astr files. Repeating this, I noticed that there were files with a non-rs SNPID:

  10:100456369:A_AC 10 100456369 10 98696612 D I C A 1.11180e-02 -0.00180162 7.46690e-01 0.9748
  10:3246437:G_GA 10 3246437 10 3204245 D I G A 2.82296e-03 -0.0876297 0.941330793 0.1372
  10:34890638:CG_C 10 34890638 10 34601710 D I C A 1.06431e-02 -0.0287082 7.66786e-01 0.6118

  These appear to represent single nucleotide insertions or deletions (is 'indels' appropriate?). In any case, there were 159 and I removed them.

  I have not removed them from other files (e.g. the aste files), but I do not think they will make a big difference.
  
**** CAD_PID 

SNPID	CHR19	BP19	REF	ALT	BETA	SE	P	N	AF	oldID	INFO	ZVAL	CHR38	BP38
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15

oldID.1	CHR19.1	BP19.1	CHR38.1	BP38.1	REF.1	ALT.1	REF.2	ALT.2	BETA.1	BETA.2	P.1	P.2
1.11	1.2	1.3	1.14	1.15	1.4	1.5	2.7	2.5	1.6	2.8	1.8	2.2

	for i in $(find chrFiles/cad/hg38 -name "*.tsv"); do join -1 15 -2 12 -o 1.11,1.2,1.3,1.14,1.15,1.4,1.5,2.7,2.5,1.6,2.8,1.8,2.2 $i ${i/cad/pid} >"joins/cad_pid/hg38/"$(basename $i); done

**** CD_PID

	for i in $(find chrFiles/cd/hg38 -name "*.tsv"); do join -1 19 -2 12 -o 1.24,1.18,1.19,1.13,1.14,2.7,2.5,1.15,2.8,1.17,2.2 $i ${i/cd/pid} >"joins/cd_pid/hg38/"$(basename $i); done

to give header:

SNPID.1	CHR38.1	BP38.1	REF.1	ALT.1	REF.2	ALT.2	BETA.1	BETA.2	P.1	P.2

**** IBD_PID

As for CD_PID:

	for i in $(find chrFiles/ibd/hg38 -name "*.tsv"); do join -t '	' -1 19 -2 12 -o 1.2,1.18,1.19,1.13,1.14,2.7,2.5,1.15,2.8,1.17,2.2 $i ${i/ibd/pid} >"joins/ibd_pid/hg38/"$(basename $i); done

SNPID.1	CHR38.1	BP38.1	REF.1	ALT.1	REF.2	ALT.2	BETA.1	BETA.2	P.1	P.2

**** RA_Okada_1_PID

SNPID.1	CHR.1	BP.1	CHR38.1	BP38.1	REF.1	ALT.1	REF.2	ALT.2	BETA.1	BETA.2	P.1	P.2

	for i in $(find chrFiles/ra_okada_1/hg38 -name "-.tsv"); do join -1 3 -2 12 -o 1.1,1.4,1.5,1.2,1.3,1.7,1.6,2.7,2.5,1.12,2.8,1.11,2.2 $i ${i/ra_okada_1/pid} >"joins/ra_okada_1_pid/hg38/"$(basename $i); done

**** RA_Okada_2_PID

	for i in $(find chrFiles/ra_okada_2/hg38 -name "-.tsv"); do join -1 3 -2 12 -o 1.1,1.4,1.5,1.2,1.3,1.7,1.6,2.7,2.5,1.12,2.8,1.11,2.2 $i ${i/ra_okada_2/pid} >"joins/ra_okada_2_pid/hg38/"$(basename $i); done

SNPID.1	CHR.1	BP.1	CHR38.1	BP38.1	REF.1	ALT.1	REF.2	ALT.2	BETA.1	BETA.2	P.1	P.2

**** RA_Okada_3_PID

SNPID.1	CHR38.1	BP38.1	REF.1	ALT.1	REF.2	ALT.2	BETA.1	BETA.2	P.1	P.2
1.13	1.14	  1.15		1.17	1.16	2.7	2.5	1.24	2.8	1.19	2.2
	
1.13,1.14,1.15,1.17,1.16,2.7,2.5,1.24,2.8,1.19,2.2

	for i in $(find chrFiles/ra_okada_3/hg38 -name "-.tsv"); do join -1 15 -2 12 -o 1.13,1.14,1.15,1.17,1.16,2.7,2.5,1.24,2.8,1.19,2.2  $i ${i/ra_okada_3/pid} >"joins/ra_okada_3_pid/hg38/"$(basename $i); done 

**** RHEC_PID

SNPID   CHR38   BP38    all.data.SNPID  CHR     BP      REF     ALT     src     P       BETA    SE      pass    im.num.0        dose.b.0        im.num.1        dose.b.1    
1	2	3	4		5	6	7	8	9	10	11	12	13	14		15		16		17
AA.0     AB.0    BB.0    AA.1    AB.1    BB.1
18	19	20	21	22	23

for i in $(find chrFiles/rhec/hg38 -name "-.tsv"); do join -1 3 -2 12 -o 1.1,1.5,1.6,1.2,1.3,1.7,1.8,2.7,2.5,1.11,2.8,1.10,2.2 $i ${i/rhec/pid} >"joins/rhc_pid/hg38/"$(basename $i); done 

  
SNPID.1	CHR.1	BP.1	CHR38.1	BP38.1	REF.1	ALT.1	REF.2	ALT.2	BETA.1	BETA.2	P.1	P.2

-o 1.1,1.5,1.6,1.2,1.3,1.7,1.8,2.7,2.5,1.11,2.8,1.10,2.2

**** SLE_PID

hm_variant_id   hm_SNPID        hm_CHR  hm_BP   hm_REF  hm_ALT  hm_BETA hm_OR   hm_ci_lower     hm_ci_upper     hm_effect_allele_frequency      hm_code CHR38   BP38    
1		2		3	4	5	6	7	8	9		10		11				12	13	14
SNPID	REF     ALT     P       BETA    SE      OR      ci_lower        ci_upper        effect_allele_frequency
15	16	17	18	19	20	21	22		23		24

SNPID.1	CHR38.1	BP38.1	REF.1	ALT.1	REF.2	ALT.2	BETA.1	BETA.2	P.1	P.2	
-o 1.15,1.13,1.14,1.16,1.17,2.7,2.5,1.19,2.8,1.18,2.2

for i in $(find chrFiles/sle/hg38 -name "-.tsv"); do join -1 14 -2 12 -o 1.15,1.13,1.14,1.16,1.17,2.7,2.5,1.19,2.8,1.18,2.2 $i ${i/sle/pid} >"joins/sle_pid/hg38/"$(basename $i); done 

**** T1D_PID

SNPID   CHR19   BP19    REF     ALT     ALT_FREQ        alternative_rsid        majmin  aff.P   aff.OR  aff.SE  ill.P   ill.OR  ill.SE  OR.meta BETA    SE      z.meta  
1	2	3	4	5	6		7			8	9	10	11	12	13	14	15	16	17	18
P   max_posterior.A  info_score.A    cases_maf.A     controls_maf.A  max_posterior.I info_score.I    cases_maf.I     controls_maf.I  qc.check        warnings        CHR38   
19		20		21	22		23		24		25		26		27		28		29		30
BP38
31              

SNPID.1	CHR19.1	BP19.1	CHR38.1	BP38.1	REF.1	ALT.1	REF.2	ALT.2	BETA.1	BETA.2	P.1	P.2

for i in $(find chrFiles/t1d/hg38 -name "*.tsv"); do join -t '	' -1 31 -2 12 -o 1.1,1.2,1.3,1.30,1.31,1.4,1.5,2.7,2.5,1.16,2.8,1.19,2.2 $i ${i/t1d/pid} >"joins/t1d_pid/hg38/"$(basename $i); done

   Join files were empty, now they contain 35 columns. I think the issue is that copying the command above and running it mangled the tab I had specified as the field separator. I had to enter it manually using <Ctrl-v><Tab>.

**** T2D_PID

for i in $(find chrFiles/t2d/hg38 -name "*.tsv"); do join -1 11 -2 12 -o 1.1,1.8,1.9,1.10,1.11,1.3,1.2,2.7,2.5,1.4,2.8,1.6,2.2 $i ${i/t2d/pid} >"joins/t2d_pid/hg38/"$(basename $i); done

SNPID.1	CHR19.1	BP19.1	CHR38.1	BP38.1	REF.1	ALT.1	REF.2	ALT.2	BETA.1	BETA.2	P.1	P.2
1.1 	1.8	1.9	1.10	1.11 	1.3	1.2	2.7	2.5	1.4	2.8	1.6	2.2

**** UC_PID 

SNPID.1	CHR38.1	BP38.1	REF.1	ALT.1	REF.2	ALT.2	BETA.1	BETA.2	P.1	P.2
1.22	1.18	1.19	1.13	1.14	2.7	2.5	1.15	2.8	1.17	2.2

for i in $(find chrFiles/uc/hg38 -name "*.tsv"); do join -1 19 -2 12 -o 1.22,1.18,1.19,1.13,1.14,2.7,2.5,1.15,2.8,1.17,2.2 $i ${i/uc/pid} >"joins/uc_pid/hg38/"$(basename $i); done

**** UKBB.allergy_PID

SNPID.1	CHR19.1	BP19.1	CHR38.1	BP38.1	REF.1	ALT.1	REF.2	ALT.2	BETA.1	BETA.2	P.1	P.2
1.1	1.2	1.3	1.11	1.12	1.4	1.5	2.7	2.5	1.10	2.8	1.9	2.2

for i in $(find chrFiles/ukbb.allergy/hg38 -name "*.tsv"); do join -1 12  -2 12 -o 1.1,1.2,1.3,1.11,1.12,1.4,1.5,2.7,2.5,1.10,2.8,1.9,2.2  $i ${i/ukbb.allergy/pid} >"joins/ukbb.allergy_pid/hg38/"$(basename $i); done

**** UKBB.asthma_PID

SNPID.1	CHR19.1	BP19.1	CHR38.1	BP38.1	REF.1	ALT.1	REF.2	ALT.2	BETA.1	BETA.2	P.1	P.2
1.1	1.2	1.3	1.11	1.12	1.4	1.5	2.7	2.5	1.10	2.8	1.9	2.2

for i in $(find chrFiles/ukbb.asthma/hg38 -name "*.tsv"); do join -1 12  -2 12 -o 1.1,1.2,1.3,1.11,1.12,1.4,1.5,2.7,2.5,1.10,2.8,1.9,2.2  $i ${i/ukbb.asthma/pid} >"joins/ukbb.asthma_pid/hg38/"$(basename $i); done

*** Join issues
    
I recall we had the same issues when joining all files, namely that join reports the input file(s) are not sorted.	 

Merging chr10 for UKBB.asthma and PID with:

	join -t "	" -1 12 -2 12 -o 1.1,1.2,1.3,1.11,1.12,1.4,1.5,2.7,2.5,1.10,2.8,1.9,2.2 pid/hg38/chr10.tsv ukbb.asthma/hg38/chr10.tsv >tmp.txt

Note that I inserted the tab with <Ctrl-v><Tab>.

This appears to be because the relevant line is missing a column, the reference allele. Sorting both files with an explicit tab separator (not actually necessary for UKBB.asthma) still results in errors about the input files not being sorted when join is run.
		
	join: chrFiles/ukbb.asthma/hg38/chr8.tsv:3647: is not sorted: rs182592118       8       950200  T       C       0.9363  0.0587778880475467      -1.12   0.2628  -0.0658193  8
		1000200
	join: chrFiles/pid/hg38/chr6.tsv:2757: is not sorted: 6_1000476 0.9431  6       1000476 C       0.9888  A       -0.0112632      -0.0713741279351119     0.157805080438106   6
		1000241
	join: chrFiles/ukbb.asthma/hg38/chr6.tsv:2618: is not sorted: rs75296463        6       1000476 C       A       0.944   0.0400823555171316      -1.438  0.1505  -0.0576291  6
		1000241
	join: chrFiles/pid/hg38/chr19.tsv:2452: is not sorted: 19_857081        0.5992  19      857081  A       1.046           0.0449734       0.525551301591541       0.0855737581922181   19      857081

  I'm not sure what the issue is here, but I'm not sure how much of a difference it makes, either.

  How about using R to merge them? Nevermind, it's too slow (see below).

  Perhaps it would help to verify all files are tab-separated prior to trying to debug the ~join~ invocation again? Counting the fields in the raw files (results in ~fieldCounts.txt~)

*** Merging joins into single files

    We have per-chromosome joins in the directories in ~joins~ and we need to merge these into single files and eventually into one file with a column of p-values for each disease. The main obstacles to this are:

    I am doing the actually merging with ~cat !(chrNA.tsv|chrCHR38.tsv) > hg38_merged.tsv

    1. the fact that reference and alternative alleles are reversed between the PID and IMD results in many cases
    2. not all SNPs are shared between studies

    It will be best to retain the pairwise joins and find some way to correct the reversal of reference/alternative alleles.

    Need to sort these, but it might be helpful to add the headers first. I collated the headers into headers.txt:

    paste <(ls | tr ' ' '\n' | grep "_pid") <(grep -v "^\*" headers.txt | sed '/^$/d') | while read line; do
    array=($line); cat <( echo ${array[@]:1:${#array[@]}}) <(${array[0]}"/hg38_merged.tsv") >tmp.txt; mv tmp.txt ${array[0]}"/hg38_merged_test.tsv"; done

    Next step is to sort each merged join file. I used the script 'oneScriptToSortThemAll.sh' to do this.

    paste <(ls | tr ' ' '\n' | grep "_pid") <(grep -v "^\*" headers.txt | sed '/^$/d') | while read line; do array=($line); echo ${array[0]}; cat <( echo ${array[@]:1:${#array[@]}}) ${array[0]}"/hg38_merged.tsv" | head -n +2; done | less

    I still have mixed field separators in the files as shown when I run ~awk -F'\t' ' { print NF } ' ...~ and get different results for the header and body.

**** Possible missing lines

     How does ~join~ handle multiple records with the same coordinates? E.g. [[https://www.ncbi.nlm.nih.gov/snp/?term=rs3115853][rs3115853]] is a tetra-allelic locus. Are there any duplicate records? Going to ~grep~ for these in the original files.

     Using my ~countDuplicateSnpIDs.sh~:

     ASTE_Ferreira_29083406_1-hg38.tsv.gz
     0
     ASTER_Ferreira_29083406_1-hg38.tsv.gz
     0
     ASTR_Ferreira_29083406_1-hg38.tsv.gz
     0
     CAD_UKBIOBANK_mod-hg38.tsv.gz
     0
     CD_DeLange_28067908_1-hg38.tsv.gz
     0
     IBD_DeLange_28067908_1-hg38.tsv.gz
     0
     PID_Thaventhiram_32678341_1-hg38.tsv.gz
     0
     RA_Okada_24390342_1-hg38.tsv.gz
     0
     RA_Okada_24390342_2-hg38.tsv.gz
     0
     RA_Okada_24390342_3-hg38.tsv.gz
     3298
     RHEC_Ferreira_29083406_1-hg38.tsv.gz
     0
     SLE_Bentham_26502338_1-hg38.tsv.gz
     2436
     T1D_Cooper_doi101101120022_1-hg38.tsv.gz
     43918
     T2D_Scott_28566273_1-hg38.tsv.gz
     17
     UC_DeLange_28067908_1-hg38.tsv.gz
     0
     UKBB.allergy.assoc-hg38.tsv.gz
     0
     UKBB.asthma.assoc-hg38.tsv.gz
     0
     
     What do these duplicates look like? For ~rs10047950~ in ~ra_okada_3~:
     
      hm_variant_id hm_SNPID hm_CHR hm_BP hm_REF hm_ALT hm_BETA hm_OR hm_ci_lower hm_ci_upper hm_effect_allele_frequency hm_code SNPID CHR38 BP38 ALT REF OR P ci_upper ci_lower effect_allele_frequency SE BETA Z
      1_84729028_T_C rs10047950 1 84729028 T C NA 1 0.961538461538461 1.03092783505155 NA 11 rs10047950 1 84729028 T C 1 0.92 1.04 0.97 NA NA 0 0
      1_84729028_T_C rs10047950 1 84729028 T C NA 1 0.970873786407767 1.04166666666667 NA 11 rs10047950 1 84729028 T C 1 0.87 1.03 0.96 NA NA 0 0
      1_84729028_T_C rs10047950 1 84729028 T C NA 0.970873786407767 0.934579439252336 1 NA 13 rs10047950 1 84729028 A G 1.03 0.065 1.07 1 NA 0.0160187887708485 0.0295588 1.8452581167555

     The first two appear to be genuine duplicates of the same reference-alternative allele pairing for the same SNP. However, the third relates to a distinct pairing in the hg38 assembly (whilst referring to the same in whichever assembly hm_* is).

     For ~rs1032867~ in ~sle~:

     X_2649204_C_G   rs1032867       X       2649204 C       G       NA      1.0     1.0     1.0     NA      6       23      2649204 rs1032867       G       C       0.31    0.0 0.0      1.0     1.0000000000000000      1.0000000000000000      NA
     X_2649204_C_G   rs1032867       X       2649204 C       G       NA      1.0     1.0     1.0     NA      6       23      2649204 rs1032867       G       C       0.31    0.0 0.0      1.0     1.0000000000000000      1.0000000000000000      NA
     
     These are just genuine duplicates. I found the same of ~rs111065313~.

     For ~rs11641127~ in ~t1d~:

     rs11641127:79607656:A:C 16      79607656        A       C       0.101   rs11641127      C>A     0.591849        0.965   0.066   0.635337        1.026   0.054   1.001   0.001            0.042   0.024   0.9810045       0.994   0.971   0.091   0.094   0.998   0.989   0.095   0.093   PASS            16      79573759
     rs11641127:79607656:A:G 16      79607656        A       G       0.136   rs11641127      G>A     0.395231        0.954   0.056   0.680646        0.981   0.047   0.969   -0.031       0.036   -0.861  0.3891769       0.987   0.961   0.141   0.146   0.971   0.906   0.141   0.143   PASS            16      79573759
     
     So this is an example of what we are concerned about: a triallelic SNP. This particular SNP wasn't retained at all in the merged, joined file, i.e. it's not the case that only one instance was retained when we might wish both were retained. Looking at ~hg38_merged.tsv~ for ~t1d~ for the first duplicate ~rs10000148~:

     rs10000148:178051350:C:A        4       178051350       4       177130196       C       A       C       A       -0.035  -0.00551518     0.288869        0.9418
     rs10000148:178051350:C:T        4       178051350       4       177130196       C       T       C       A       -0.052  -0.00551518     0.5919016       0.9418

     So duplicate SNPs were retained despite their having the same CHR/BP pairing. Searching through the individual join files, I found that many multiple entries for the same location, i.e. for the same SNP. So my fear of losing duplicated SNP entries in the process of joining seems to be unfounded. 
     
**** Checking alleles and fixing ref/allele transposition

     Sometimes alleles are reversed and sometimes the pairs of alleles are different altogether.

     zcat ASTE_Ferreira_29083406_1-hg38.tsv.gz | cut -f1 | sort | uniq -c | sed 's/^\s\+//' | awk '$1>1' | wc -l 

     A few notes on the checking program:

     - convert all alleles to lower-case 
     - check that there are two distinct alleles from each study; 
     - check that we have two instances of each of the two alleles

     Inspired by [[https://stackoverflow.com/a/47523199][this SO answer]] when it came to the use of ~xargs~ to sort each line 'internally':

     cat hg38_merged.tsv | while read line; do array=($line); if echo ${array[@]:5:4} | tr '[:upper:]' '[:lower:]' | xargs -n1 | sort | uniq -c | xargs | grep -Pq "2 [actg] 2 [actg]"; then echo $line; else echo "No match for $line"; fi; done

     The ~else~ statement I used only when testing this program, so actually filtered the file with
     
     cat hg38_merged.tsv | while read line; do array=($line); if echo ${array[@]:5:4} | tr '[:upper:]' '[:lower:]' | xargs -n1 | sort | uniq -c | xargs | grep -Pq "2 [actg] 2 [actg]"; then echo $line; fi; done 

     Seems this takes forever! I wrote a Python script, ~filterForValidAllelePairs.py~, which accomplished the task in seconds instead, but on reflection this seemed like unnecessary bloat and that we could instead accomplish this with ~awk~, whether or not I wished to retain SNPs for which the reference and alternate alleles were reversed in the PID study. Using ~awk~ instead (in the script ~filterMergedJoins.sh~) was even simpler. I filtered the merged joins into files containing:

     - only those SNPs for which the ref/alt pair was the same from both studies (~synonOnly~)
     - only those SNPs for which the ref/alt pair was the same or transposed (~synonAndTransposed~)

     I will keep the ponderous bash one-liner above for the sake of reminding myself how not to write such a program. The trick with ~xargs~ might come in handy, too.

     After speaking with Chris about it, I resolved the transposition issue by flipping the signs of the beta coefficients where necessary using ~flipBetaForTransAlleles.sh~.
   
**** Systematising the joining process

     I need to perform a similar join, this time for all non-PID diseases onto asthma. It makes sense to write a single script to do this from the component parts I've already written. The major obstacle is the different separators.
     
     Process I'm currently following:

     - run joining.sh
     - mergeChrFiles.sh
     - run sortAllMergedJoins.sh
     - run addHeaders.sh (depends on headers.txt)
     - run filterMergedJoin.sh
     - run flipBetaForTransAlleles.sh

     Well, that is the process I *was* following prior to adopting R.

     Now with R:

     - ~joinGwasFiles.R~ on the original files
     - ~filterMergedJoin.sh~
     - ~flipBetaForTransAlleles.sh~
       
*** Joining with R

    Just noting down the main commands I use here. Experimenting on chr10 of the aste and pid files.
    
    # read in the files with header=F, sep="\t"
    asteChr11<-read.table('chr11.tsv',header=F, sep="\t")
    colnames(asteChr10)<-paste0('1.', 1:ncol(asteChr10))
    
    I used the following to convert the text of fields to retain from the original script to a vector in R:
    indicesToRetain<-unlist(strsplit("1.1,1.5,1.6,1.2,1.3,1.7,1.8,2.7,2.5,1.11,2.8,1.10,2.2", ","))

    Worryingly, using this approach yields 340782 rows rather than 252974 as with the Unix join approach.

    Trying the same on chr11, I found 331038 rows vs. 213957 with Unix join.

    I will try to write a command-line program to perform this merging. Needs to take input file paths, output file path, and fields to include in the output file (want to be able to copy this from the existing scripts).

    Timing a single job merging chr1 of aste and asthma of sizes:

    1042360 chr1.tsv (aste)
    580174 chr1.tsv (asthma)

    real    1m1.798s
    user    0m41.283s
    sys     0m20.194s

   Timing the pairwise joining of all chr files for the same two diseases:
   
    real    22m58.135s
    user    10m37.479s
    sys     10m43.711s

    Allegedly there are faster functions in the ~dplyr~ package, but it is worth noting that the main bottleneck seems to be in loading the table.

    Timing ~inner_join~ and ~merge~ on chr1 of aste and asthma:

    [1] "R merge"
    1.32 sec elapsed
    [1] "dplyr::inner_join"
    0.674 sec elapsed

    So dplyr is faster. The data frames were not equal when I compared them, but sorting the SNPIDs and comparing them showed that there was no difference there, so there is some difference in how each handles the join. Maybe ~inner_join~ doesn't sort things? Now using ~order~ to make sure the output is sorted.

    How about we just merge the original GWAS files (as opposed to the chr files)?

    > tic()
    > aste<-read.table('aste.tsv',header=T, sep='\t')
    > toc()
    2139.635 sec elapsed
    > tic()
    > asthma<-read.table('asthma.tsv', header=T, sep='\t')
    > toc()
    143.55 sec elapsed

    Hmm, takes a while:

    tic()
    joined<-inner_join(aste, asthma, by=c("1.2"="2.11","1.3"="2.12"))
    toc()

    125.316 sec elapsed

    Timing the aste/asthma join:

    real    7m57.971s
    user    6m20.119s
    sys     1m34.481s

    I checked that where the rs ID differed between 

    rs142441326     rs113454255     1       953678  1       1018298

    Invocation:

    Rscript joinGwasFiles.R -lf aste.tsv -rf asthma.tsv -lc 2 -lb 3 -rc 11 -rb 12 -ofs 1.1,1.5,1.6,1.2,1.3,1.7,1.8,2.4,2.5,1.11,2.10,1.10,2.9 -of aste_asthma.tsv

    Could not get R to run non-interactively because of an issue with ~readRDS~ and a workspace file's version. Is working interactively, though. I had thought ~joinGwasFiles.R~ was functional, but attempting to merge aste and asthma during an interactive job lead to a two-line output file. Seems this was due to the use of the order function. I have removed this for now.

    Now that I am running jobs interactively, I am finding my cd_asthma and cad_asthma merge jobs are *sometimes* killed when running on ~skylake-himem~.

    I ran the following to try and diagnose the issue:

    ~dmesg T | grep -i "killed"~

    Running the job using Rscript did not help, either. Maybe it's just this particular interactive session/node? Trying another session. This time it *worked*. Maybe it was just the node was busy.

    Invocation when launching an interactive R interpreter session:

    R --args -lf cd.tsv -rf asthma.tsv -lc 18 -lb 19 -rc 11 -rb 12 -ofs 1.24,1.18,1.19,1.13,1.14,2.4,2.5,1.15,2.10,1.17,2.9 -of cd_asthma.tsv

    I then invoke ~joinGwasFiles.R~ from within the session so that I have access to the objects once completed.

    Currently facing an issue with sorting the chromomsome column sensibly. What is the universe of chr values I am contending with here? 1-22, X, Y, M, and those of the format \d{1,2}_contig_alt etc. These columns need to be stored as factors with a dynamically computed ordering. That said, I want results to show ahead of next week's meeting, so I will hard code it for now. All that said, does it really matter? No! If a user wants the file sort, they can always run ~sort -n~ on the chr column.
    
* cFDR analysis
 
** Asthma analyses

   I think the Ferreira et al. study's phenotype is inappropriate for what is intended to be a simple exploratory analysis. The phenotype is actually a composite one corresponding to the presence of one or more of hayfever, eczema, and asthma.

** R code

  TODO Investigate origin of NA P.1 (and BETA.1) values in cd_asthma_synonOnlyAndTransposed_flippedBeta.tsv.gz
  
  Running my ~cfdrScript.R~ on 32 cores on ~skylake-himem~. Still taking a long time and unfortunately I have no indication as to how far along it is whilst it is running.

  Some easy mistakes not to make in the future:
  - submission directory is the working directory, will be inherited by R (duh!)

    Now running, but I would like to use my approach to reproduce the results in the vignette as I have a very large number of discoveries with FDR set to 0.1 and even when I reduce the threshold by orders of magnitude, I still have many discoveries. In particular, we have
    
  > length(which(p<1e-6))
  [1] 3435
  > length(bh(v_fold,0.1))
  [1] 3435
  ...
  > length(bh(v_fold,1e-6))
  [1] 830
  > length(bh(v_fold,1e-7))
  [1] 526

  These numbers seem improbable to me. What are the numbers when only the principal p values are considered?

  The code I was using to run the BH procedure on p-values was incorrect and I fixed it, but I believe the code used for the v-values is still incorrect.

  

* Appendix

  
PID: 
| SNPID | P | CHR19 | BP19 | ALT | OR | REF | BETA | Z | SE | CHR38 | BP38 |
|     1 | 2 |     3 |    4 |   5 |  6 |   7 |    8 | 9 | 10 |    11 |   12 |
ASTE:
ASTER: 
ASTR:
| SNPID | CHR38 | BP38 | all.data.SNPID | CHR | BP | REF | ALT | src |  P | BETA | SE | pass | im.num.0 | dose.b.0 | im.num.1 | dose.b.1 | AA.0 | AB.0 | BB.0 | AA.1 | AB.1 | BB.1 |
|     1 |     2 |    3 |              4 |   5 |  6 |   7 |   8 |   9 | 10 |   11 | 12 |   13 |       14 |       15 |       16 |       17 |   18 |   19 |   20 |   21 |   22 |   23 |


CAD_UKBIOBANK (after liftover):
| SNPID | CHR19 | BP19 | REF | ALT | BETA | SE | P | N | AF | oldID | INFO | ZVAL | CHR38 | BP38 |
|     1 |     2 |    3 |   4 |   5 |    6 |  7 | 8 | 9 | 10 |    11 |   12 |   13 |    14 |   15 |

CD_DeLange:
IBD_DeLange:
| hm_variant_id | hm_SNPID | hm_CHR | hm_BP | hm_REF | hm_ALT | hm_BETA | hm_OR | hm_ci_lower | hm_ci_upper | hm_effect_allele_frequency | hm_code | REF | ALT | BETA | SE |  P | CHR38 | BP38 | OR | ci_lower | ci_upper | effect_allele_frequency | SNPID |   |
|             1 |        2 |      3 |     4 |      5 |      6 |       7 |     8 |           9 |          10 |                         11 |      12 |  13 |  14 |   15 | 16 | 17 |    18 |   19 | 20 |       21 |       22 |                      23 |    24 |   |


RA_Okada-1:
RA_Okada-2:
| SNPID | CHR38 | BP38 | CHR | BP | ALT | REF | OR | OR_95%CIlow | OR_95%CIup |  P | BETA |  Z | SE |
|     1 |     2 |    3 |   4 |  5 |   6 |   7 |  8 |           9 |            | 10 |   11 | 12 | 13 |

RA_Okada-3:
| hm_variant_id | hm_SNPID | hm_CHR | hm_BP | hm_REF | hm_ALT | hm_BETA | hm_OR | hm_ci_lower | hm_ci_upper | hm_effect_allele_frequency | hm_code | SNPID | CHR38 | BP38 | ALT | REF | OR |  P | ci_upper | ci_lower | effect_allele_frequency | SE | BETA |  Z |
|             1 |        2 |      3 |     4 |      5 |      6 |       7 |     8 |           9 |          10 |                         11 |      12 |    13 |    14 |   15 |  16 |  17 | 18 | 19 |       20 |       21 |                      22 | 23 |   24 | 25 |


RHEC_Ferreira:
| SNPID | CHR38 | BP38 | all.data.SNPID | CHR | BP | REF | ALT | src |  P | BETA | SE | pass | im.num.0 | dose.b.0 | im.num.1 | dose.b.1 | AA.0 | AB.0 | BB.0 | AA.1 | AB.1 | BB.1 |   |   |   |
|     1 |     2 |    3 |              4 |   5 |  6 |   7 |   8 |   9 | 10 |   11 | 12 |   13 |       14 |       15 |       16 |       17 |   18 |   19 |   20 |   21 |   22 |   23 |   |   |   |


SLE_Bentham:
| hm_variant_id | hm_SNPID | hm_CHR | hm_BP | hm_REF | hm_ALT | hm_BETA | hm_OR | hm_ci_lower | hm_ci_upper | hm_effect_allele_frequency | hm_code | CHR38 | BP38 | SNPID	REF | ALT |  P | BETA | SE | OR | ci_lower | ci_upper | effect_allele_frequency |
|             1 |        2 |      3 |     4 |      5 |      6 |       7 |     8 |           9 |          10 |                         11 |      12 |    13 |   14 |         15 |  16 | 17 |   18 | 19 | 20 |       21 |       22 |                      23 |


T1D_Cooper:
| SNPID | CHR19 | BP19 | REF | ALT | ALT_FREQ | alternative_rsid | majmin | aff.P | aff.OR | aff.SE | ill.P | ill.OR | ill.SE | OR.meta | BETA | SE | z.meta |  P | max_posterior.A | info_score.A | cases_maf.A | controls_maf.A | max_posterior.I | info_score.I | cases_maf.I | controls_maf.I | qc.check | warnings | CHR38 | BP38 |
|     1 |     2 |    3 |   4 |   5 |        6 |                7 |      8 |     9 |     10 |     11 |    12 |     13 |     14 |      15 |   16 | 17 |     18 | 19 |              20 |           21 |          22 |             23 |              24 |           25 |          26 |             27 |       28 |       29 |    30 |   31 |

T2D_Scott:
| SNPID | ALT | REF | BETA | SE | P | TotalSampleSize | CHR19 | BP19 | CHR38 | BP38 |
|     1 |   2 |   3 |    4 |  5 | 6 |               7 |     8 |    9 |    10 |   11 |

UC_DeLange:
| hm_variant_id | hm_SNPID | hm_CHR | hm_BP | hm_REF | hm_ALT | hm_BETA | hm_OR | hm_ci_lower | hm_ci_upper | hm_effect_allele_frequency | hm_code | REF | ALT | BETA	SE |  P | CHR38 | BP38 | effect_allele_frequency | ci_upper | SNPID | OR | ci_lower |
|             1 |        2 |      3 |     4 |      5 |      6 |       7 |     8 |           9 |          10 |                         11 |      12 |  13 |  14 |       15 | 16 |    17 |   18 |                      19 |       20 |    21 | 22 |       23 |

UKBB.asthma.assoc-hg38:
| SNPID | CHR19 | BP19 | REF | ALT | OR | SE | STAT | P | BETA | CHR38 | BP38 |
|     1 |     2 |    3 |   4 |   5 |  6 |  7 |    8 | 9 |   10 |    11 |   12 |

UKBB.allergy.assoc-hg38:
| SNPID | CHR19 | BP19 | REF | ALT | OR | SE | STAT | P | BETA | CHR38 | BP38 |
|     1 |     2 |    3 |   4 |   5 |  6 |  7 |    8 | 9 |   10 |    11 |   12 |

** Benchmarking ~sort~

   Doing simple tests as running ~sort~ in parallel does not seem to speed things up. 
  
  for i in {1..1000000}; do echo $RANDOM >>rand.txt; done

  [tw395@login-e-12 pidProject]$ time sort --parallel=1 -n -o tmp.txt rand.txt;

  real    0m1.674s
  user    0m1.632s
  sys     0m0.035s
  [tw395@login-e-12 pidProject]$ time sort --parallel=2 -n -o tmp.txt rand.txt;

  real    0m0.949s
  user    0m1.677s
  sys     0m0.062s
  [tw395@login-e-12 pidProject]$ time sort --parallel=4 -n -o tmp.txt rand.txt;

  real    0m0.677s
  user    0m1.904s
  sys     0m0.059s

  [tw395@login-e-12 pidProject]$ time sort --parallel=8 -n -o tmp.txt rand.txt;

  real    0m0.533s
  user    0m2.045s
  sys     0m0.072s
  
  [tw395@login-e-12 pidProject]$ time sort -n -o tmp.txt rand.txt;

  real    0m1.665s
  user    0m1.614s
  sys     0m0.044s

  Sorting the merged, joined ~ibd_pid~ files:

  [tw395@login-e-12 hg38]$ time sort --parallel=8 -n -t ' ' -k2,2 -k3,3 -o sorted_tmp.tsv tmp.tsv

  real    0m10.323s
  user    0m57.661s
  sys     0m1.012s
  
  [tw395@login-e-12 hg38]$ time sort --parallel=4 -n -t ' ' -k2,2 -k3,3 -o sorted_tmp_2.tsv tmp.tsv

  real    0m16.857s
  user    0m56.470s
  sys     0m1.026s
  
  [tw395@login-e-12 hg38]$ time sort --parallel=1 -n -t ' ' -k2,2 -k3,3 -o sorted_tmp_2.tsv tmp.tsv

  real    0m57.724s
  user    0m56.528s
  sys     0m1.032s

  [tw395@login-e-12 hg38]$ time sort -n -t '      ' -k2,2 -k3,3 -o sorted_tmp_2.tsv tmp.tsv

  real    0m55.246s
  user    0m53.677s
  sys     0m1.357s

 
** Is it appreciably slower to load the compressed files into R directly?

   Takes <1176s to load the compressed aste file and and 1032s to load the uncompressed file.

   Going to try using the ~data.table~ package in order to speed things up. Note that ~fread~ can read from gzipped files directly provided ~R.utils~ is installed.

   ~fread~ from gzipped aste with 8 threads: 99s.
   
   ~fread~ from unzipped aste with 8 threads: 30s.
   
   ~fread~ from gzipped aste with 12 threads: 356s (node was probably congested).

   The answer seems to be no, at least on the timescales that concern me.

** What does ~devtools::install~ actually do?

  (...or ~install.packages~ for that matter?)

  ~install.packages~ installs packages to a specified or default lib path. I take installation to mean source files are copied to the path and compiled as necessary.

  ~devtools::install~

*** Package file format

    [[https://stackoverflow.com/questions/48934886/how-do-i-keep-source-files-when-using-rs-devtools-library-function-install][Some insight to be had at this SO question]]. R stores packages in binary database files ~*.rdb~ and ~*.rdx~ in the ~R~ subfolder of the package installation path for the sake of efficiency. 
